import{Z as P}from"./DXqIG5h6.js";import{u as l,y as m,z as R,A as G,r as d,B as w,C as f,D as v,E as S,F as A,i as E,G as M,H as y}from"./BORQtvDy.js";import"./Bo9Y2Pl6.js";const{empty:O,wood:I,alloy:N}=E,g=(t,e,s)=>{const{raw:r,tier1:i,tier2:a}=s,o=r.map(h=>M(t,h)),n=y(t,e,r,i);return{raw:o,tier1:n,tier2:y(t,e,r.concat(n),a)}};function C(t,e){return e===0?t.raw:e===1?t.tier1:t.tier2}const p={current:"mpCurrent",fav:"mpFav"};function F(t="current"){return t==="fav"?f.getItem(p.fav,[I,N]):f.getItem(p.current,I)}const D=P("Processing",{state:()=>{const{profitMargin:t,avgCraft:e}=l(),s=g(t,e,F()),r=F("fav").map(a=>Object.assign({name:a.name},g(t,e,a)));return{...s,recipes:r}},actions:{newMaterial(t){const{profitMargin:e,crafts:s}=l();return g(e,s,t)},getGoods(t,e){const s=t===-1?this:this.recipes[t];return C(s,e)},allIncomes(t){const e=t===-1?this:this.recipes[t];return{raw:m(e.raw,s=>s.num*s.unitProfit),tier1:m(e.tier1,s=>s.num*s.unitProfit),tier2:m(e.tier2,s=>s.num*s.unitProfit)}},cost(t){const e=t===-1?this:this.recipes[t];return m(e.raw,s=>s.num*s.cost)},hourly(t,e){const{avgCraft:s}=l(),{tier1:r,tier2:i}=t===-1?this:this.recipes[t],o=R(s,e===1?r:i);if(e===2){const n=G(s,r,i);return o.map((h,c)=>{const u=n[c]*i[c].avgyield;return{...h,craftsFromRaw:n[c],yieldFromRaw:u,profitFromRaw:u*i[c].unitProfit,costFromRaw:n[c]*i[c].cost}})}else if(o.length>1){const n=o.length,h=Object.keys(o[0]);o.forEach(c=>{h.forEach(u=>{c[u]/=n})})}return o},timeCost(t){const e=t===-1?this.$state:this.recipes[t],s=m(e.tier1,"timeCost"),r=m(e.tier2,"timeCost");return[d(s),d(r)]},refresh(){Object.assign(this,this.newMaterial(this))},async refreshFav(){this.recipes.forEach(t=>{Object.assign(t,this.newMaterial(t))})},updateStorage(){const t=w(this);f.setItem(p.current,t);const e=this.recipes.map(s=>w(s));f.setItem(p.fav,e)},updateName(t,e,s){const[r,i]=t===0?[this.raw,this.tier1]:t===1?[this.tier1,this.tier2]:[this.tier2],a=r[e].name;i==null||i.forEach(o=>{const n=o.raw.findIndex(h=>h.name===a);n>-1&&(o.raw[n].name=s)}),r[e].name=s},updateRaw(t,e,s){s=Number(s),this.raw[e][t]=s,this.refresh()},updateProduct(t,e,s,r){if(t==="consumption"){if(!(r instanceof Array))return;this[`tier${e}`][s].raw[r[0]].consumption=Number(r[1])}else r=Number(r),this[`tier${e}`][s][t]=r;this.refresh()},updateRawOfProduct(t,e,s,r){const i=this[`tier${t}`][e];s?i.raw.push({name:r,consumption:t===1?5:10}):v(i.raw,"name",r),this.refresh()},appendGoods(t){const e=this.getGoods(-1,t),s=S(e.length?A(e):C(O,t)[0]);t!==0&&(s.raw=[]);const r=e.map(o=>o.name),i=t===0?"原料":"產物";let a=0;for(;r.includes(i+(a>0?a:""));)a++;s.name=i+(a>0?a:""),e.push(s),this.refresh()},overrideCurrent(t){const e=typeof t=="string"?E[t]:this.recipes[t];Object.assign(this,this.newMaterial(e))},removeGoods(t,e){const[s,r]=t===0?[this.raw,this.tier1]:t===1?[this.tier1,this.tier2]:[this.tier2],i=s.splice(e,1)[0];r==null||r.forEach(a=>{v(a.raw,"name",i.name)}),this.refresh()},appendFav(t){this.recipes.push({name:t,...this.newMaterial(this)})},removeFav(t){this.recipes.splice(t,1)}}});export{D as default};
